# 限流相关共享内存区域定义
limit_conn_zone $binary_remote_addr zone=per_ip:10m;
limit_req_zone $binary_remote_addr zone=req_rate:10m rate=10r/s;


# 服务1集群 - 权重负载均衡
upstream service1 {              #   http://localhost/service1/ 
    least_conn;  # 使用最少连接负载均衡算法，将请求转发到当前连接数最少的服务器
    server 192.168.0.3:8080 weight=2;  # 主实例，权重为2，接收更多比例的请求    
    server 192.168.0.3:8082 weight=1;  # 备用实例，权重为1，接收较少比例的请求
    
}

# 服务2集群 - 主备模式
upstream service2 {
    server 192.168.0.3:8081;           # 主实例，正常情况下接收所有请求  浏览器输入 http://localhost/service2/ 
}

# API网关主配置
server {
    listen 80;  # 监听80端口（HTTP）
    server_name 192.168.0.3;  # 服务器名称，用于虚拟主机匹配
    
    # 安全强化
    server_tokens off;  # 隐藏Nginx版本信息，减少安全风险
    add_header X-Content-Type-Options nosniff;  # 防止浏览器内容类型嗅探
    add_header X-Frame-Options SAMEORIGIN;  # 允许同源页面通过iframe加载
    
    
    # 静态内容缓存
    location /static/ {  # 匹配以/static/开头的请求
        root /data/www;  # 静态文件根目录
        expires 7d;  # 浏览器缓存7天
        add_header Cache-Control "public";  # 允许公共缓存
    }
    
    # 服务1路由
    location /service1/ {  # 匹配以/service1/开头的请求
        proxy_pass http://service1/;  # 转发请求到service1上游集群
        proxy_set_header Host $host;  # 传递原始Host头
        proxy_set_header X-Real-IP $remote_addr;  # 传递客户端真实IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 追加转发IP信息
        proxy_set_header X-Forwarded-Proto $scheme;  # 传递原始协议（HTTP/HTTPS）
        
        # 超时设置
        proxy_connect_timeout 5s;  # 连接上游服务器的超时时间
        proxy_send_timeout 60s;  # 发送请求到上游服务器的超时时间
        proxy_read_timeout 60s;  # 从上游服务器读取响应的超时时间
        
        # 负载均衡相关
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;  # 定义需要重试的错误状态
        proxy_next_upstream_tries 3;  # 最大重试次数
        
        # 限流配置
        limit_conn per_ip 100;  # 每个IP最大并发连接数
        limit_req zone=req_rate burst=50 nodelay;  # 突发请求限制，允许50个突发请求不延迟
        
        # 熔断配置
        error_page 502 503 504 = /service1_fallback;  # 定义错误页面映射
    }
    
    # 服务2路由
    location /service2/ {  # 匹配以/service2/开头的请求
        
        proxy_pass http://service2/;  # 基于map变量动态转发请求
        # 其他配置与service1相同...
    }
    
    # 熔断回退
    location = /service1_fallback {  # 精确匹配/service1_fallback路径
        internal;  # 仅允许内部重定向访问
        default_type application/json;  # 设置响应内容类型为JSON
        return 503 '{"status":"service unavailable","message":"service1 is temporary unavailable"}';  # 返回JSON格式错误信息
    }
    
    # 统一错误处理
    error_page 400 401 403 404 /error.json;  # 定义错误状态码映射
    location = /error.json {  # 精确匹配/error.json路径
        internal;  # 仅允许内部重定向访问
        default_type application/json;  # 设置响应内容类型为JSON
        return 404 '{"status":"error","message":"resource not found"}';  # 返回JSON格式错误信息
    }
}